apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "provider.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "provider.fullname" . }}
    {{- include "provider.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      app: {{ include "provider.fullname" . }}
      {{- include "provider.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        app: {{ include "provider.fullname" . }}
        {{- include "provider.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "provider.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          command: ["/bin/sh", "/boot/run.sh"]
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            ##
            # boot config
            ##

            # location of key export. must contain two files:
            #
            # key.txt:      exported wallet key
            # key-pass.txt: password used to encrypt exported key
            - name: AKASH_BOOT_KEYS
              value: "/boot-keys"

            ##
            # cosmos-sdk client config
            ##

            # --home
            - name: AKASH_HOME
              value: "{{ .Values.home }}"

            # --from
            - name: AKASH_FROM
              value: "{{ .Values.from }}"

            # --node
            - name: AKASH_NODE
              value: "{{ .Values.node }}"

            # --chain-id
            - name: AKASH_CHAIN_ID
              value: "{{ .Values.chainid }}"

            # --keyring-backend
            - name: AKASH_KEYRING_BACKEND
              value: "{{ .Values.keyringbackend }}"

            # --trust-node
            - name: AKASH_TRUST_NODE
              value: "{{ .Values.trustnode }}"

            ##
            # akash-provider config
            ##

            - name: AKASH_DEPLOYMENT_INGRESS_DOMAIN
              value: "ingress.{{ .Values.domain }}"

            - name: AKASH_FEES
              value: "5123uakt"

            - name: AKASH_DEPLOYMENT_INGRESS_STATIC_HOSTS
              value: "true"
    
            - name: AKASH_DEPLOYMENT_BLOCKED_HOSTNAMES
              value: ""

            - name: AKASH_CLUSTER_NODE_PORT_QUANTITY
              value: "2500"

            - name: AKASH_CLUSTER_PUBLIC_HOSTNAME
              value: "provider.{{ .Values.domain }}"
    
            - name: AKASH_BID_PRICE_STRATEGY
              value: "scale"

            - name: AKASH_BID_PRICE_CPU_SCALE
              value: "0.004"

            - name: AKASH_BID_PRICE_MEMORY_SCALE
              value: "0.0016"
    
            - name: AKASH_BID_PRICE_ENDPOINT_SCALE
              value: "0"

            - name: AKASH_BID_PRICE_STORAGE_SCALE
              value: "0.00016"  
    
            - name: AKASH_OVERCOMMIT_PCT_CPU
              value: "0"

            - name: AKASH_OVERCOMMIT_PCT_MEM
              value: "0"

            - name: AKASH_OVERCOMMIT_PCT_STORAGE
              value: "0"

            - name: AKASH_LOG_LEVEL
              value: "info"

            - name: AKASH_CLUSTER_K8S
              value: "true"
    
            - name: KUBE_CONFIG
              value: "{{ .Values.home }}/.kube/config"

            - name: AKASH_DEPLOYMENT_RUNTIME_CLASS
              value: "none"

            - name: AKASH_WITHDRAWAL_PERIOD
              value: "24h"

          ports:
            - name: api
              containerPort: 8443
              protocol: TCP
              hostPort: 8443
          volumeMounts:
            - name: boot
              mountPath: /boot
              readOnly: true
            - name: keys
              mountPath: /boot-keys
              readOnly: true
      volumes:
        - name: boot
          configMap:
            name: {{ include "provider.fullname" . }}-boot
        - name: keys
          secret:
            secretName: {{ include "provider.fullname" . }}-keys
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
